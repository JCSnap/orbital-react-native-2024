"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rootCACertPath = exports.rootCAKeyPath = exports.rootCADir = exports.caSelfSignConfig = exports.opensslDatabaseFilePath = exports.opensslSerialFilePath = exports.caVersionFile = exports.pathForDomain = exports.domainsDir = exports.configPath = exports.configDir = exports.isWindows = exports.isLinux = exports.isMac = exports.VALID_DOMAIN = exports.VALID_IP = void 0;
exports.withDomainSigningRequestConfig = withDomainSigningRequestConfig;
exports.withDomainCertificateConfig = withDomainCertificateConfig;
exports.getLegacyConfigDir = getLegacyConfigDir;
exports.ensureConfigDirs = ensureConfigDirs;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const utils_1 = require("./utils");
function applicationConfigPath(name) {
    switch (process.platform) {
        case 'darwin':
            return path_1.default.join(process.env.HOME, 'Library', 'Application Support', name);
        case 'win32':
            return process.env.LOCALAPPDATA
                ? path_1.default.join(process.env.LOCALAPPDATA, name)
                : path_1.default.join(process.env.USERPROFILE, 'Local Settings', 'Application Data', name);
        case 'linux':
        default:
            return process.env.XDG_CONFIG_HOME
                ? path_1.default.join(process.env.XDG_CONFIG_HOME, name)
                : path_1.default.join(process.env.HOME, '.config', name);
    }
}
exports.VALID_IP = /(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}/;
exports.VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;
// Platform shortcuts
exports.isMac = process.platform === 'darwin';
exports.isLinux = process.platform === 'linux';
exports.isWindows = process.platform === 'win32';
// Common paths
exports.configDir = applicationConfigPath('devcert');
exports.configPath = path_1.default.join.bind(path_1.default, exports.configDir);
exports.domainsDir = (0, exports.configPath)('domains');
exports.pathForDomain = path_1.default.join.bind(path_1.default, exports.domainsDir);
exports.caVersionFile = (0, exports.configPath)('devcert-ca-version');
exports.opensslSerialFilePath = (0, exports.configPath)('certificate-authority', 'serial');
exports.opensslDatabaseFilePath = (0, exports.configPath)('certificate-authority', 'index.txt');
exports.caSelfSignConfig = path_1.default.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');
function eolAuto(str) {
    return str.replace(/\r?\n|\r/g, exports.isWindows ? '\r\n' : '\n');
}
function withDomainSigningRequestConfig(domain, cb) {
    let tmpFile = (0, utils_1.mktmp)();
    let source = fs_1.default.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');
    let result = source.replace(/%DOMAIN%/g, domain);
    fs_1.default.writeFileSync(tmpFile, eolAuto(result));
    cb(tmpFile);
    fs_1.default.rmSync(tmpFile);
}
function withDomainCertificateConfig(domain, cb) {
    let tmpFile = (0, utils_1.mktmp)();
    let source = fs_1.default.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');
    let result = source
        .replace(/%DOMAIN%/g, domain)
        .replace(/%SERIALFILE%/g, exports.opensslSerialFilePath.replace(/\\/g, '\\\\'))
        .replace(/%DATABASEFILE%/g, exports.opensslDatabaseFilePath.replace(/\\/g, '\\\\'))
        .replace(/%DOMAINDIR%/g, (0, exports.pathForDomain)(domain).replace(/\\/g, '\\\\'));
    fs_1.default.writeFileSync(tmpFile, eolAuto(result));
    cb(tmpFile);
    fs_1.default.rmSync(tmpFile);
}
// confTemplate = confTemplate.replace(/DATABASE_PATH/, configPath('index.txt').replace(/\\/g, '\\\\'));
// confTemplate = confTemplate.replace(/SERIAL_PATH/, configPath('serial').replace(/\\/g, '\\\\'));
// confTemplate = eolAuto(confTemplate);
exports.rootCADir = (0, exports.configPath)('certificate-authority');
exports.rootCAKeyPath = (0, exports.configPath)('certificate-authority', 'private-key.key');
exports.rootCACertPath = (0, exports.configPath)('certificate-authority', 'certificate.cert');
// Exposed for uninstallation purposes.
function getLegacyConfigDir() {
    if (exports.isWindows && process.env.LOCALAPPDATA) {
        return path_1.default.join(process.env.LOCALAPPDATA, 'devcert', 'config');
    }
    else {
        let uid = process.getuid && process.getuid();
        let userHome = (exports.isLinux && uid === 0) ? path_1.default.resolve('/usr/local/share') : require('os').homedir();
        return path_1.default.join(userHome, '.config', 'devcert');
    }
}
function ensureConfigDirs() {
    fs_1.default.mkdirSync(exports.configDir, { recursive: true });
    fs_1.default.mkdirSync(exports.domainsDir, { recursive: true });
    fs_1.default.mkdirSync(exports.rootCADir, { recursive: true });
}
ensureConfigDirs();
//# sourceMappingURL=data:application/json;base64,